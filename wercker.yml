box: python:2.7
no-response-timeout: 15
dev:
  services:
    - redis
    - id: api
      url: file://../ws_api#dev
      cmd: python /pipeline/source/app.py

  steps:
    - pip-install
    - internal/watch:
        name: start web server
        code: python app.py
        reload: true
build:
  services:
    - redis
    - wercker/api
  steps:
    - pip-install
    - script:
        name: copy artifacts
        code: |
          cp wercker-app.json app.py requirements.txt $WERCKER_OUTPUT_DIR

deploy:
  box: python:2.7-slim
  dockerhub:
  - pip-install
  - internal/docker-push:
      username: $DOCKER_USER
      password: $DOCKER_PASS
      repository: markbirbeck/frontend
      cmd: "python /pipeline/source/app.py"
      ports: 5001
  gcr:
  - install-packages:
      packages: curl
  - script:
      name: add gcloud references
      code: |
        # Create an environment variable for the correct distribution
        export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"

        # Add the Cloud SDK distribution URI as a package source
        echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list

        # Import the Google Cloud public key
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

        # Update and install the Cloud SDK
        sudo apt-get update
  - install-packages:
      packages: google-cloud-sdk jq
  - script:
      name: gcr.io authentication
      code: |
        gcloud auth activate-refresh-token $GCLOUD_ACCOUNT $GCLOUD_REFRESH_TOKEN
        gcloud docker --authorize-only
        export GCR_AUTH_TOKEN=$(cat $HOME/.dockercfg | jq --raw-output '.["https://gcr.io"].auth' | base64 --decode | cut -d ':' -f2)
  - pip-install
  - internal/docker-push:
      username: _token
      password: $GCR_AUTH_TOKEN
      repository: gcr.io/dash-audio/frontend
      registry: https://gcr.io
      cmd: "python /pipeline/source/app.py"
      ports: 5001
  aws-ecs:
  - script:
      name: copy
      code: mkdir /app && cp wercker-app.json /app/
  - tonnu/aws-ecs:
      key: $AWS_ACCESS_KEY
      secret: $AWS_SECRET_KEY
      region: us-east-1
      cluster-name: default
      service-name: wercker
      task-definition-name: wercker-counter
      task-definition-file: /app/wercker-app.json
      minimum-running-tasks: 1
